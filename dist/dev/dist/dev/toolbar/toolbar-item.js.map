{"version":3,"sources":["toolbar/toolbar-item.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAQ,mB,sBAAA,a;;AACA,Y,+BAAA,M;;AACA,e,oBAAA,S;;AACA,uB,qBAAA,iB;;AACA,sB,2BAAA,gB;;AACA,oB,yBAAA,c;;AACA,U,eAAA,I;;;6BAKK,W,WAHZ,cAAiB,UAAU,aAA3B,kB,UACA,kBAAkB,aAAlB,C,UACA,OAAO,gBAAP,EAAyB,cAAzB,EAAyC,IAAzC,EAA+C,OAA/C,C;AAGC,6BAAY,gBAAZ,EAA8B,cAA9B,EAA8C,IAA9C,EAAoD,OAApD,EAA6D;AAAA;;AAC3D,eAAK,gBAAL,GAAwB,gBAAxB;AACA,eAAK,cAAL,GAAsB,cAAtB;AACA,eAAK,IAAL,GAAY,IAAZ;AACA,eAAK,OAAL,GAAe,OAAf;AACD;;8BAED,U,yBAAa;AAAA;;AACX,cAAI,YAAY,KAAK,IAAL,CAAU,cAAV,CAAyB,KAAK,OAA9B,EAA0C,UAAU,aAApD,cAAhB;AACA,eAAK,gBAAL,CAAsB,YAAtB,CAAmC,IAAnC,EAAyC,aAAzC,EAAwD,SAAxD;;AAEA,cAAI,UAAU,KAAK,IAAL,CAAU,cAAV,CAAyB,KAAK,OAA9B,EAA0C,UAAU,aAApD,yBAAd;AACA,cAAI,WAAW,QAAQ,MAAR,GAAiB,CAAhC,EAAmC;AACjC,iBAAK,QAAL,GAAgB,EAAhB;;AAEA,oBAAQ,OAAR,CAAgB,gBAAQ;AACtB,oBAAK,QAAL,CAAc,IAAd,CAAmB,KAAK,UAAL,EAAnB;AACD,aAFD;AAGD;;AAED,iBAAO,KAAK,cAAL,CAAoB,UAApB,CAA+B,IAA/B,EAAqC,aAArC,CAAP;AACD,S","file":"toolbar/toolbar-item.js","sourceRoot":"/source/","sourcesContent":["import {customElement} from 'aurelia-templating';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {constants} from '../common/constants';\r\nimport {generateBindables} from '../common/decorators';\r\nimport {TemplateGatherer} from '../common/template-gatherer';\r\nimport {OptionsBuilder} from '../common/options-builder';\r\nimport {Util} from '../common/util';\r\n\r\n@customElement(`${constants.elementPrefix}toolbar-item`)\r\n@generateBindables('ToolBarItem')\r\n@inject(TemplateGatherer, OptionsBuilder, Util, Element)\r\nexport class ToolbarItem {\r\n\r\n  constructor(templateGatherer, optionsBuilder, util, element) {\r\n    this.templateGatherer = templateGatherer;\r\n    this.optionsBuilder = optionsBuilder;\r\n    this.util = util;\r\n    this.element = element;\r\n  }\r\n\r\n  getOptions() {\r\n    let templates = this.util.getChildrenVMs(this.element, `${constants.elementPrefix}template`);\r\n    this.templateGatherer.useTemplates(this, 'ToolBarItem', templates);\r\n\r\n    let buttons = this.util.getChildrenVMs(this.element, `${constants.elementPrefix}toolbar-item-button`);\r\n    if (buttons && buttons.length > 0) {\r\n      this.kButtons = [];\r\n\r\n      buttons.forEach(item => {\r\n        this.kButtons.push(item.getOptions());\r\n      });\r\n    }\r\n\r\n    return this.optionsBuilder.getOptions(this, 'ToolBarItem');\r\n  }\r\n}\r\n"]}