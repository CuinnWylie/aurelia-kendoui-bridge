{"version":3,"sources":["common/template.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ,Y,+BAAA,M;;AACA,mB,sBAAA,a;AAAe,c,sBAAA,Q;AAAU,Y,sBAAA,M;AAAQ,oB,sBAAA,c;AAAgB,uB,sBAAA,iB;;AACjD,e,oBAAA,S;;;0BAcK,Q,WAZZ,cAAiB,UAAU,aAA3B,c,UACA,Q,UACA,eAAe,UAAC,QAAD,EAAW,SAAX,EAAsB,OAAtB,EAA+B,WAA/B,EAA+C;AAC7D,YAAI,OAAO,QAAQ,SAAnB;AACA,YAAI,SAAS,EAAb,EAAiB;AACf,sBAAY,QAAZ,GAAuB,IAAvB;AACD;AACD,gBAAQ,SAAR,GAAoB,EAApB;AAGD,OARA,C,UASA,OAAO,iBAAP,C,wEAMC,kBAAY,iBAAZ,EAA+B;AAAA;;AAAA;;AAAA;;AAAA;;AAC7B,aAAK,QAAL,GAAgB,kBAAkB,kBAAlB,CAAqC,QAArD;AACD,O,2EANA,Q;;;8EACA,Q;;;iBAAe,U;;wFACf,Q;;;iBAAyB,K","file":"common/template.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\r\nimport {customElement, bindable, noView, processContent, TargetInstruction} from 'aurelia-templating';\r\nimport {constants} from '../common/constants';\r\n\r\n@customElement(`${constants.elementPrefix}template`)\r\n@noView()\r\n@processContent((compiler, resources, element, instruction) => {\r\n  let html = element.innerHTML;\r\n  if (html !== '') {\r\n    instruction.template = html;\r\n  }\r\n  element.innerHTML = ''; // remove any HTML from `<ak-template>` because it has already been retrieved above\r\n\r\n  // don't return true, so aurelia does not process the content of <ak-template>\r\n})\r\n@inject(TargetInstruction)\r\nexport class Template {\r\n  @bindable template;\r\n  @bindable for = 'template';\r\n  @bindable kendoTemplate = false;\r\n\r\n  constructor(targetInstruction) {\r\n    this.template = targetInstruction.elementInstruction.template;\r\n  }\r\n}\r\n"]}