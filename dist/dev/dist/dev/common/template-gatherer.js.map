{"version":3,"sources":["common/template-gatherer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAQ,uB,sBAAA,iB;;AACA,U,SAAA,I;;AACA,Y,+BAAA,M;;AACA,wB,kBAAA,kB;;AACA,W,mBAAA,K;AAAO,0B,mBAAA,oB;AAAsB,2B,mBAAA,qB;;;kCAGxB,gB,WADZ,OAAO,iBAAP,EAA0B,IAA1B,EAAgC,kBAAhC,C;AAKC,kCAAY,iBAAZ,EAAkD,IAAlD,EAA8D,MAA9D,EAA0F;AAAA;;AACxF,eAAK,iBAAL,GAAyB,iBAAzB;AACA,eAAK,MAAL,GAAc,MAAd;AACA,eAAK,IAAL,GAAY,IAAZ;AACD;;mCAUD,Y,yBAAa,M,EAAQ,W,EAAa,S,EAAW;AAAA;;AAC3C,cAAI,gBAAgB,KAAK,iBAAL,CAAuB,qBAAvB,CAA6C,WAA7C,CAApB;;AAEA,cAAI,CAAC,SAAL,EAAgB;AACd,wBAAY,EAAZ;AACD;;AAED,oBAAU,OAAV,CAAkB,aAAK;AACrB,gBAAI,CAAC,EAAE,GAAP,EAAY;AACV,oBAAM,IAAI,KAAJ,CAAU,kHAAV,CAAN;AACD;;AAED,gBAAI,cAAc,OAAd,CAAsB,EAAE,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACvC,kBAAI,EAAE,GAAF,CAAM,OAAN,CAAc,GAAd,MAAuB,CAAC,CAA5B,EAA+B;AAC7B,sBAAM,IAAI,KAAJ,CAAU,sCAAsC,EAAE,GAAxC,GAA8C,uBAA9C,GAAwE,cAAc,IAAd,CAAmB,IAAnB,CAAlF,CAAN;AACD;AACF;;AAED,gBAAI,MAAK,IAAL,CAAU,QAAV,CAAmB,EAAE,QAArB,CAAJ,EAAoC;AAAA;AAClC,oBAAI,WAAW,EAAE,QAAjB;;AAEA,oBAAI,MAAK,MAAL,CAAY,gBAAhB,EAAkC;AAChC,6BAAW,MAAK,MAAL,CAAY,gBAAZ,CAA6B,MAA7B,EAAqC,CAArC,EAAwC,EAAE,QAA1C,CAAX;AACD;;AAKD,oBAAI,SAAS,IAAI,oBAAJ,CAAyB,IAAI,KAAJ,EAAzB,EAAsC,EAAE,GAAxC,CAAb;;AAEA,oBAAI,aAAa,OAAO,eAAP,EAAjB;;AAGA,oBAAI,WAAW,UAAf;AACA,uBAAO,QAAP,EAAiB;AACf,sBAAI,CAAC,SAAS,MAAd,EAAsB;AAEpB,6BAAS,IAAT,GAAgB,MAAK,IAAL,CAAU,uBAAV,CAAkC,SAAS,IAA3C,CAAhB;AACD;AACD,6BAAW,SAAS,MAApB;AACD;;AAED,oBAAI,QAAQ,sBAAsB,MAAtB,EAA8B,EAA9B,CAAZ;;AAIA,2BAAW,MAAX,CAAkB,KAAlB,EAAyB,EAAE,aAAF,GAAkB,QAAlB,GAA6B;AAAA,yBAAM,QAAN;AAAA,iBAAtD;AA5BkC;AA6BnC;AACF,WAzCD;AA0CD,S","file":"common/template-gatherer.js","sourceRoot":"/source/","sourcesContent":["import {ControlProperties} from './control-properties';\r\nimport {Util} from './util';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {KendoConfigBuilder} from '../config-builder';\r\nimport {Lexer, ParserImplementation, createOverrideContext} from 'aurelia-binding';\r\n\r\n@inject(ControlProperties, Util, KendoConfigBuilder)\r\nexport class TemplateGatherer {\r\n\r\n  controlProperties: ControlProperties;\r\n\r\n  constructor(controlProperties: ControlProperties, util: Util, config: KendoConfigBuilder) {\r\n    this.controlProperties = controlProperties;\r\n    this.config = config;\r\n    this.util = util;\r\n  }\r\n\r\n  /***\r\n  * parses array of ak-template view-models (@children)\r\n  * <ak-template for='test'>\r\n  * this function sets the property 'test' on the viewmodel to the template\r\n  * @param target the viewModel with template properties\r\n  * @param kendoGrid or GridColumn, properties are retrieved from bindables.js\r\n  * @param templates array of ak-template view-models\r\n  */\r\n  useTemplates(target, controlName, templates) {\r\n    let templateProps = this.controlProperties.getTemplateProperties(controlName);\r\n\r\n    if (!templates) {\r\n      templates = [];\r\n    }\r\n\r\n    templates.forEach(c => {\r\n      if (!c.for) {\r\n        throw new Error('Templating support is not enabled. Call .kendoTemplateSupport() in main.js or import common/template via require');\r\n      }\r\n\r\n      if (templateProps.indexOf(c.for) === -1) {\r\n        if (c.for.indexOf('.') === -1) {\r\n          throw new Error('Invalid template property name: \"' + c.for + '\", valid values are: ' + templateProps.join(', '));\r\n        }\r\n      }\r\n\r\n      if (this.util.hasValue(c.template)) {\r\n        let template = c.template;\r\n\r\n        if (this.config.templateCallback) {\r\n          template = this.config.templateCallback(target, c, c.template);\r\n        }\r\n\r\n        // now we must parse the expression inside for=\"\" on the ak-template\r\n        // and set the template on the wrapper object\r\n        // get a ParserImplementation for the expression inside for=\"editable.template\"\r\n        let parser = new ParserImplementation(new Lexer(), c.for);\r\n        // get the expression (generates a tree of AccessMembers)\r\n        let expression = parser.parseExpression();\r\n        // when the user uses \"editable.template\" it must be set as \"kEditable.template\"\r\n        // so here we iterate through the tree until we get to the last object (the first part of the expression)\r\n        let iterator = expression;\r\n        while (iterator) {\r\n          if (!iterator.object) {\r\n            // convert \"editable\" to \"kEditable\"\r\n            iterator.name = this.util.getBindablePropertyName(iterator.name);\r\n          }\r\n          iterator = iterator.object;\r\n        }\r\n        // get the scope of the widget instance\r\n        let scope = createOverrideContext(target, {});\r\n        // set the value on the object based on the expression\r\n        // so if the expression is \"a.b.c\" and the template is \"abcd\"\r\n        // it will set { a: { b: { c: 'abcd' }}}\r\n        expression.assign(scope, c.kendoTemplate ? template : () => template);\r\n      }\r\n    });\r\n  }\r\n}\r\n"]}