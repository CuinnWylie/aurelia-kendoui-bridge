{"version":3,"sources":["common/options-builder.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAQ,Y,+BAAA,M;;AACA,uB,sBAAA,iB;;AACA,U,SAAA,I;;;gCAOK,c,WADZ,OAAO,iBAAP,EAA0B,IAA1B,C;AAGC,gCAAY,iBAAZ,EAAkD,IAAlD,EAA8D;AAAA;;AAC5D,eAAK,iBAAL,GAAyB,iBAAzB;AACA,eAAK,IAAL,GAAY,IAAZ;AACD;;iCAKD,U,uBAAW,S,EAAW,S,EAAW;AAC/B,cAAI,UAAU,EAAd;AACA,cAAI,QAAQ,KAAK,iBAAL,CAAuB,aAAvB,CAAqC,SAArC,CAAZ;;AAIA,cAAI,UAAU,kBAAd,EAAkC;AAChC,sBAAU,kBAAV,CAA6B,OAA7B;AACD;;AAED,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACrC,gBAAI,OAAO,MAAM,CAAN,CAAX;AACA,gBAAI,QAAQ,UAAU,KAAK,IAAL,CAAU,uBAAV,CAAkC,IAAlC,CAAV,CAAZ;;AAEA,gBAAI,KAAK,IAAL,CAAU,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAC7B,sBAAQ,IAAR,IAAgB,KAAhB;AACD;AACF;;AAID,cAAI,UAAU,iBAAd,EAAiC;AAC/B,sBAAU,iBAAV,CAA4B,OAA5B;AACD;;AAED,iBAAO,KAAK,IAAL,CAAU,YAAV,CAAuB,OAAvB,CAAP;AACD,S","file":"common/options-builder.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\r\nimport {ControlProperties} from './control-properties';\r\nimport {Util} from './util';\r\n\r\n/***\r\n* Converts an object with bindable properties (with k- convention)\r\n* into an object that can be passed to a Kendo control\r\n*/\r\n@inject(ControlProperties, Util)\r\nexport class OptionsBuilder {\r\n\r\n  constructor(controlProperties: ControlProperties, util: Util) {\r\n    this.controlProperties = controlProperties;\r\n    this.util = util;\r\n  }\r\n\r\n  /**\r\n  * converts properties of view-model (with k- convention) to an object\r\n  */\r\n  getOptions(viewModel, className) {\r\n    let options = {};\r\n    let props = this.controlProperties.getProperties(className);\r\n\r\n    // allows view-models to do some pre processing\r\n    // for example, process all ak-templates\r\n    if (viewModel.beforeOptionsBuild) {\r\n      viewModel.beforeOptionsBuild(options);\r\n    }\r\n\r\n    for (let i = 0; i < props.length; i++) {\r\n      let prop = props[i];\r\n      let value = viewModel[this.util.getBindablePropertyName(prop)];\r\n\r\n      if (this.util.hasValue(value)) {\r\n        options[prop] = value;\r\n      }\r\n    }\r\n\r\n    // allows view-models to do some post processing\r\n    // used in ak-col to support nested columns\r\n    if (viewModel.afterOptionsBuild) {\r\n      viewModel.afterOptionsBuild(options);\r\n    }\r\n\r\n    return this.util.pruneOptions(options);\r\n  }\r\n}\r\n"]}