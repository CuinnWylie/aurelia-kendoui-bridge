{"version":3,"sources":["common/template-compiler.js"],"names":["inject","TemplatingEngine","ViewResources","createOverrideContext","Util","TemplateCompiler","templatingEngine","util","isInitialized","initialize","window","kendo","_this","ui","Widget","prototype","angular","_event","_args","handleTemplateEvents","mobile","widget","$parent","container","$angular","options","_$parent","_$container","args","elements","data","compile","cleanup","i","element","ctx","undefined","_data","dataItem","aggregate","isObject","jQuery","each","index","elem","enhanceView","length","view","querySelectorAll","childContainer","createChild","resources","get","enhance","bindingContext","overrideContext","bind","attached","cleanupView","detached","unbind"],"mappings":"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","file":"common/template-compiler.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\r\nimport {TemplatingEngine, ViewResources} from 'aurelia-templating';\r\nimport {createOverrideContext} from 'aurelia-binding';\r\nimport {Util} from './util';\r\n\r\n/**\r\n* An adaptor which uses Aurelia's enhance capability to\r\n* compile any template Kendo wants to have compiled\r\n*/\r\n@inject(TemplatingEngine, Util)\r\nexport class TemplateCompiler {\r\n\r\n  /**\r\n  * We don't need to initialize the TemplateCompiler every time a Kendo controls\r\n  * is initialized\r\n  */\r\n  isInitialized = false;\r\n\r\n  constructor(templatingEngine, util) {\r\n    this.templatingEngine = templatingEngine;\r\n    this.util = util;\r\n  }\r\n\r\n  /**\r\n  * Initialize the template compiler and\r\n  * patch the angular property to retrieve compilation requests\r\n  * from Kendo controls\r\n  * @param $parent The overrideContext to use when a template gets compiled\r\n  */\r\n  initialize() {\r\n    if (this.isInitialized) return;\r\n\r\n    if (!window.kendo) return;\r\n\r\n    // all controls derive from kendo.ui.Widget\r\n    // override the angular property on these objects, and point it towards handleTemplateEvents\r\n    let _this = this;\r\n    kendo.ui.Widget.prototype.angular = function(_event, _args) {\r\n      _this.handleTemplateEvents(this, _event, _args);\r\n    };\r\n    kendo.mobile.ui.Widget.prototype.angular = function(_event, _args) {\r\n      _this.handleTemplateEvents(this, _event, _args);\r\n    };\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n  * Gets called by Kendo, and filters out compile and cleanup events,\r\n  * then calls the compile or cleanup function with the needed arguments\r\n  * @param _event Events like 'compile' or 'cleanup'\r\n  * @param _args optional array of dataitems\r\n  */\r\n  handleTemplateEvents(widget, _event: string, _args?) {\r\n    if (_event !== 'compile' && _event !== 'cleanup') return;\r\n\r\n    // pull the parent context of the widget, or of the options\r\n    // in some cases, templates are compiled when a Kendo control's constructor is called\r\n    // in these cases we get the parent context of the options instead of the\r\n    // widget\r\n    let $parent;\r\n    let container;\r\n    let $angular = widget.$angular || widget.options.$angular;\r\n\r\n    if ($angular) {\r\n      $parent = $angular[0]._$parent;\r\n      container = $angular[0]._$container;\r\n    }\r\n\r\n    if (!$parent) return;\r\n\r\n    let args = _args();\r\n    let elements = args.elements; // extract elements from the args\r\n    let data = args.data; // extract the dataitems from the args\r\n\r\n    switch (_event) {\r\n    case 'compile':\r\n      // we need to pass elements and data to compile\r\n      // so that Aurelia can enhance this elements with the correct\r\n      // binding context\r\n      this.compile($parent, elements, data, container);\r\n      break;\r\n\r\n    case 'cleanup':\r\n      // we don't care about dataitems when we do the cleanup\r\n      // so we just pass in the DOM elements\r\n      this.cleanup(elements);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * loops through each element, and find the matching dataitem\r\n  * and calls enhanceView(element, dataItem) for each element there is\r\n  * @param elements an array of Elements or a kendo.jQuery selector\r\n  * @param data optionally an array of dataitems\r\n  */\r\n  compile($parent, elements, data, container) {\r\n    for (let i = 0; i < elements.length; i++) {\r\n      let element = elements[i];\r\n      let ctx = undefined;\r\n\r\n      if (data && data[i]) {\r\n        let _data = data[i];\r\n        let dataItem = _data.dataItem || _data.aggregate || _data;\r\n\r\n        if (!this.util.isObject(dataItem)) {\r\n          ctx = {\r\n            dataItem: dataItem\r\n          };\r\n        } else {\r\n          ctx = dataItem;\r\n        }\r\n      }\r\n\r\n      if (element instanceof kendo.jQuery) {\r\n        element.each((index, elem) => this.enhanceView($parent, elem, ctx, container));\r\n      } else {\r\n        this.enhanceView($parent, element, ctx, container);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * uses the enhance function of Aurelia's TemplatingEngine\r\n  * to \"compile\" existing DOM elements\r\n  * @param element The Element to compile\r\n  * @param ctx The dataitem (context) to compile the Element with\r\n  */\r\n  enhanceView($parent, element, ctx, container) {\r\n    let view = kendo.jQuery(element).data('viewInstance');\r\n\r\n    // check necessary due to https://github.com/aurelia-ui-toolkits/aurelia-kendoui-bridge/issues/308\r\n    if (element.querySelectorAll('.au-target').length === 0) {\r\n      if (container) {\r\n        let childContainer = container.createChild();\r\n        let resources = container.get(ViewResources);\r\n\r\n        view = this.templatingEngine.enhance({\r\n          bindingContext: ctx,\r\n          overrideContext: createOverrideContext(ctx, $parent),\r\n          container: childContainer,\r\n          element: element,\r\n          resources: resources\r\n        });\r\n      } else {\r\n        view = this.templatingEngine.enhance({\r\n          bindingContext: ctx,\r\n          overrideContext: createOverrideContext(ctx, $parent),\r\n          element: element\r\n        });\r\n      }\r\n\r\n      // when we do cleanup, we need to get the view instance\r\n      // so we can call detached/unbind\r\n      // so we store this view instance in the DOM element using kendo.jQuery.data\r\n      kendo.jQuery(element).data('viewInstance', view);\r\n    } else {\r\n      view.bind(ctx, createOverrideContext(ctx, $parent));\r\n    }\r\n\r\n    view.attached(); // attach it to the DOM\r\n  }\r\n\r\n  /**\r\n  * loops through each element kendo asks us to clean up\r\n  * calls cleanupView() for each element\r\n  * @param element An array of elements\r\n  */\r\n  cleanup(elements) {\r\n    if (!elements) return;\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      let element = elements[i];\r\n      this.cleanupView(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * cleans up the view kendo has asked us to clean up\r\n  */\r\n  cleanupView(element) {\r\n    // extract Aurelia's View instance from the element\r\n    // we stored this in the enhanceView function\r\n    let view = kendo.jQuery(element).data('viewInstance');\r\n    if (!view) return;\r\n\r\n    // unbind and detach the view\r\n    view.detached();\r\n    view.unbind();\r\n  }\r\n}\r\n"]}