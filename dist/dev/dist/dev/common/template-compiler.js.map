{"version":3,"sources":["common/template-compiler.js"],"names":[],"mappings":"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","file":"common/template-compiler.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\r\nimport {TemplatingEngine} from 'aurelia-templating';\r\nimport {createOverrideContext} from 'aurelia-binding';\r\nimport {Util} from './util';\r\n\r\n/**\r\n* An adaptor which uses Aurelia's enhance capability to\r\n* compile any template Kendo wants to have compiled\r\n*/\r\n@inject(TemplatingEngine, Util)\r\nexport class TemplateCompiler {\r\n\r\n  /**\r\n  * We don't need to initialize the TemplateCompiler every time a Kendo controls\r\n  * is initialized\r\n  */\r\n  isInitialized = false;\r\n\r\n  constructor(templatingEngine, util) {\r\n    this.templatingEngine = templatingEngine;\r\n    this.util = util;\r\n  }\r\n\r\n  /**\r\n  * Initialize the template compiler and\r\n  * patch the angular property to retrieve compilation requests\r\n  * from Kendo controls\r\n  * @param $parent The overrideContext to use when a template gets compiled\r\n  */\r\n  initialize() {\r\n    if (this.isInitialized) return;\r\n\r\n    if (!window.kendo) return;\r\n\r\n    // all controls derive from kendo.ui.Widget\r\n    // override the angular property on these objects, and point it towards handleTemplateEvents\r\n    let _this = this;\r\n    kendo.ui.Widget.prototype.angular = function(_event, _args) {\r\n      _this.handleTemplateEvents(this, _event, _args);\r\n    };\r\n    kendo.mobile.ui.Widget.prototype.angular = function(_event, _args) {\r\n      _this.handleTemplateEvents(this, _event, _args);\r\n    };\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n  * Gets called by Kendo, and filters out compile and cleanup events,\r\n  * then calls the compile or cleanup function with the needed arguments\r\n  * @param _event Events like 'compile' or 'cleanup'\r\n  * @param _args optional array of dataitems\r\n  */\r\n  handleTemplateEvents(widget, _event: string, _args?) {\r\n    if (_event !== 'compile' && _event !== 'cleanup') return;\r\n\r\n    // pull the parent context of the widget, or of the options\r\n    // in some cases, templates are compiled when a Kendo control's constructor is called\r\n    // in these cases we get the parent context of the options instead of the\r\n    // widget\r\n    let $parent;\r\n    let viewResources;\r\n    let $angular = widget.$angular || widget.options.$angular;\r\n\r\n    if ($angular) {\r\n      $parent = $angular[0]._$parent;\r\n      viewResources = $angular[0]._$resources;\r\n    }\r\n\r\n    if (!$parent) return;\r\n\r\n    let args = _args();\r\n    let elements = args.elements; // extract elements from the args\r\n    let data = args.data; // extract the dataitems from the args\r\n\r\n    switch (_event) {\r\n    case 'compile':\r\n      // we need to pass elements and data to compile\r\n      // so that Aurelia can enhance this elements with the correct\r\n      // binding context\r\n      this.compile($parent, elements, data, viewResources);\r\n      break;\r\n\r\n    case 'cleanup':\r\n      // we don't care about dataitems when we do the cleanup\r\n      // so we just pass in the DOM elements\r\n      this.cleanup(elements);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * loops through each element, and find the matching dataitem\r\n  * and calls enhanceView(element, dataItem) for each element there is\r\n  * @param elements an array of Elements or a kendo.jQuery selector\r\n  * @param data optionally an array of dataitems\r\n  */\r\n  compile($parent, elements, data, viewResources) {\r\n    for (let i = 0; i < elements.length; i++) {\r\n      let element = elements[i];\r\n      let ctx = undefined;\r\n\r\n      if (data && data[i]) {\r\n        let _data = data[i];\r\n        let dataItem = _data.dataItem || _data.aggregate || _data;\r\n\r\n        if (!this.util.isObject(dataItem)) {\r\n          ctx = {\r\n            dataItem: dataItem\r\n          };\r\n        } else {\r\n          ctx = dataItem;\r\n        }\r\n      }\r\n\r\n      if (element instanceof kendo.jQuery) {\r\n        element.each((index, elem) => this.enhanceView($parent, elem, ctx, viewResources));\r\n      } else {\r\n        this.enhanceView($parent, element, ctx, viewResources);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * uses the enhance function of Aurelia's TemplatingEngine\r\n  * to \"compile\" existing DOM elements\r\n  * @param element The Element to compile\r\n  * @param ctx The dataitem (context) to compile the Element with\r\n  */\r\n  enhanceView($parent, element, ctx, viewResources) {\r\n    let view = kendo.jQuery(element).data('viewInstance');\r\n\r\n    // check necessary due to https://github.com/aurelia-ui-toolkits/aurelia-kendoui-bridge/issues/308\r\n    if (element.querySelectorAll('.au-target').length === 0) {\r\n      if (viewResources) {\r\n        view = this.templatingEngine.enhance({\r\n          bindingContext: ctx,\r\n          overrideContext: createOverrideContext(ctx, $parent),\r\n          element: element,\r\n          resources: viewResources\r\n        });\r\n      } else {\r\n        view = this.templatingEngine.enhance({\r\n          bindingContext: ctx,\r\n          overrideContext: createOverrideContext(ctx, $parent),\r\n          element: element\r\n        });\r\n      }\r\n\r\n      // when we do cleanup, we need to get the view instance\r\n      // so we can call detached/unbind\r\n      // so we store this view instance in the DOM element using kendo.jQuery.data\r\n      kendo.jQuery(element).data('viewInstance', view);\r\n    } else {\r\n      view.bind(ctx, createOverrideContext(ctx, $parent));\r\n    }\r\n\r\n    view.attached(); // attach it to the DOM\r\n  }\r\n\r\n  /**\r\n  * loops through each element kendo asks us to clean up\r\n  * calls cleanupView() for each element\r\n  * @param element An array of elements\r\n  */\r\n  cleanup(elements) {\r\n    if (!elements) return;\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      let element = elements[i];\r\n      this.cleanupView(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * cleans up the view kendo has asked us to clean up\r\n  */\r\n  cleanupView(element) {\r\n    // extract Aurelia's View instance from the element\r\n    // we stored this in the enhanceView function\r\n    let view = kendo.jQuery(element).data('viewInstance');\r\n    if (!view) return;\r\n\r\n    // unbind and detach the view\r\n    view.detached();\r\n    view.unbind();\r\n  }\r\n}\r\n"]}