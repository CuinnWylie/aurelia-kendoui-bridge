{"version":3,"sources":["common/decorators.js"],"names":[],"mappings":";;;;;;;;AAAQ,sB,sBAAA,gB;AAAkB,0B,sBAAA,oB;;AAClB,e,+BAAA,S;;AACA,c,oBAAA,Q;;AACA,iB,mBAAA,W;;AACA,e,qBAAA,S;;AACA,uB,sBAAA,iB;;AACA,U,SAAA,I;;;AAOD,eAAS,iBAAT,CAA2B,WAA3B,EAAsE;AAAA,YAAtB,eAAsB,yDAAJ,EAAI;;AAC3E,eAAO,UAAS,MAAT,EAAiB,GAAjB,EAAsB,UAAtB,EAAkC;AAGvC,cAAI,mBAAmB,SAAS,cAAT,CAAwB,SAAS,QAAjC,EAA2C,oBAA3C,EAAiE,MAAjE,CAAvB;AACA,cAAI,YAAa,UAAU,QAAV,IAAsB,IAAI,SAAJ,EAAvC;AACA,cAAI,oBAAoB,UAAU,GAAV,CAAc,iBAAd,CAAxB;AACA,cAAI,OAAO,UAAU,GAAV,CAAc,IAAd,CAAX;AACA,cAAI,aAAa,kBAAkB,aAAlB,CAAgC,WAAhC,EAA6C,eAA7C,CAAjB;;AAEA,qBAAW,IAAX,CAAgB,QAAhB;AACA,qBAAW,IAAX,CAAgB,SAAhB;AACA,qBAAW,IAAX,CAAgB,QAAhB;;AAEA,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAAW,MAA/B,EAAuC,GAAvC,EAA4C;AAC1C,gBAAI,SAAS,WAAW,CAAX,CAAb;;AAGA,gBAAI,uBAAuB;AACzB,oBAAM,KAAK,uBAAL,CAA6B,MAA7B;AADmB,aAA3B;;AAIA,gBAAI,WAAW,QAAf,EAAyB;AACvB,mCAAqB,kBAArB,GAA0C,YAAY,MAAtD;AACD;;AAED,gBAAI,OAAO,IAAI,gBAAJ,CAAqB,oBAArB,CAAX;AACA,iBAAK,YAAL,CAAkB,MAAlB,EAA0B,gBAA1B,EAA4C,UAA5C;AACD;AACF,SA5BD;AA6BD;;;;AAGM,eAAS,OAAT,GAAmB;AACxB,eAAO,UAAS,MAAT,EAAiB,GAAjB,EAAsB,UAAtB,EAAkC;AACvC,cAAI,YAAY,CAAC,UAAU,QAAV,IAAsB,IAAI,SAAJ,EAAvB,EAAwC,GAAxC,CAA4C,SAA5C,CAAhB;AACA,cAAI,MAAM,WAAW,KAArB;;AAEA,qBAAW,KAAX,GAAmB,YAAkB;AAAA;;AAAA,8CAAN,IAAM;AAAN,kBAAM;AAAA;;AACnC,sBAAU,SAAV,CAAoB;AAAA,qBAAM,IAAI,KAAJ,QAAgB,IAAhB,CAAN;AAAA,aAApB;AACD,WAFD;;AAIA,iBAAO,UAAP;AACD,SATD;AAUD","file":"common/decorators.js","sourceRoot":"/source/","sourcesContent":["import {BindableProperty, HtmlBehaviorResource} from 'aurelia-templating';\r\nimport {Container} from 'aurelia-dependency-injection';\r\nimport {metadata} from 'aurelia-metadata';\r\nimport {bindingMode} from 'aurelia-binding';\r\nimport {TaskQueue} from 'aurelia-task-queue';\r\nimport {ControlProperties} from './control-properties';\r\nimport {Util} from './util';\r\n\r\n/**\r\n* Creates a BindableProperty for every option defined in a Kendo control\r\n* in the option property of a Kendo control\r\n* @param controlName The Kendo control of which the options should be converted into bindable properties\r\n*/\r\nexport function generateBindables(controlName: string, extraProperties = []) {\r\n  return function(target, key, descriptor) {\r\n    // get or create the HtmlBehaviorResource\r\n    // on which we're going to create the BindableProperty's\r\n    let behaviorResource = metadata.getOrCreateOwn(metadata.resource, HtmlBehaviorResource, target);\r\n    let container = (Container.instance || new Container());\r\n    let controlProperties = container.get(ControlProperties);\r\n    let util = container.get(Util);\r\n    let optionKeys = controlProperties.getProperties(controlName, extraProperties);\r\n\r\n    optionKeys.push('widget');\r\n    optionKeys.push('options');\r\n    optionKeys.push('noInit');\r\n\r\n    for (let i = 0; i < optionKeys.length; i++) {\r\n      let option = optionKeys[i];\r\n\r\n      // set the name of the bindable property to the option\r\n      let nameOrConfigOrTarget = {\r\n        name: util.getBindablePropertyName(option)\r\n      };\r\n\r\n      if (option === 'widget') {\r\n        nameOrConfigOrTarget.defaultBindingMode = bindingMode.twoWay;\r\n      }\r\n\r\n      let prop = new BindableProperty(nameOrConfigOrTarget);\r\n      prop.registerWith(target, behaviorResource, descriptor);\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport function delayed() {\r\n  return function(target, key, descriptor) {\r\n    let taskQueue = (Container.instance || new Container()).get(TaskQueue);\r\n    let ptr = descriptor.value;\r\n\r\n    descriptor.value = function(...args) {\r\n      taskQueue.queueTask(() => ptr.apply(this, args));\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n"]}