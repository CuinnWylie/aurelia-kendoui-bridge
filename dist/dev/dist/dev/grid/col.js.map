{"version":3,"sources":["grid/col.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQ,c,sBAAA,Q;AAAU,mB,sBAAA,a;;AACV,Y,+BAAA,M;;AACA,e,oBAAA,S;;AACA,uB,qBAAA,iB;;AACA,sB,2BAAA,gB;;AACA,oB,yBAAA,c;;;qBAKK,G,WAHZ,cAAiB,UAAU,aAA3B,S,UACA,kBAAkB,YAAlB,C,UACA,OAAO,gBAAP,EAAyB,cAAzB,C,UAEE,SAAY,UAAU,aAAtB,c,UACA,SAAY,UAAU,aAAtB,S;AAED,qBAAY,gBAAZ,EAA8B,cAA9B,EAA8C;AAAA;;AAAA;;AAAA;;AAC5C,eAAK,gBAAL,GAAwB,gBAAxB;AACA,eAAK,cAAL,GAAsB,cAAtB;AACD;;sBAED,kB,iCAAqB;AACnB,eAAK,gBAAL,CAAsB,YAAtB,CAAmC,IAAnC,EAAyC,YAAzC,EAAuD,KAAK,SAA5D;AACD,S;;sBAGD,iB,8BAAkB,O,EAAS;AAAA;;AACzB,cAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAAb,GAAsB,CAA1C,EAA6C;AAC3C,oBAAQ,OAAR,GAAkB,EAAlB;;AAEA,iBAAK,OAAL,CAAa,OAAb,CAAqB,eAAO;AAC1B,sBAAQ,OAAR,CAAgB,IAAhB,CAAqB,MAAK,cAAL,CAAoB,UAApB,CAA+B,GAA/B,EAAoC,YAApC,CAArB;AACD,aAFD;AAGD;AACF,S;;;;;;iBArB2D,E;;;;;iBACP,E","file":"grid/col.js","sourceRoot":"/source/","sourcesContent":["import {children, customElement} from 'aurelia-templating';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {constants} from '../common/constants';\r\nimport {generateBindables} from '../common/decorators';\r\nimport {TemplateGatherer} from '../common/template-gatherer';\r\nimport {OptionsBuilder} from '../common/options-builder';\r\n\r\n@customElement(`${constants.elementPrefix}col`)\r\n@generateBindables('GridColumn')\r\n@inject(TemplateGatherer, OptionsBuilder)\r\nexport class Col {\r\n  @children(`${constants.elementPrefix}template`) templates = [];\r\n  @children(`${constants.elementPrefix}col`) columns = [];\r\n\r\n  constructor(templateGatherer, optionsBuilder) {\r\n    this.templateGatherer = templateGatherer;\r\n    this.optionsBuilder = optionsBuilder;\r\n  }\r\n\r\n  beforeOptionsBuild() {\r\n    this.templateGatherer.useTemplates(this, 'GridColumn', this.templates);\r\n  }\r\n\r\n  // recursively get options of all nested columns that we can pass to Kendo\r\n  afterOptionsBuild(options) {\r\n    if (this.columns && this.columns.length > 0) {\r\n      options.columns = [];\r\n\r\n      this.columns.forEach(col => {\r\n        options.columns.push(this.optionsBuilder.getOptions(col, 'GridColumn'));\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}