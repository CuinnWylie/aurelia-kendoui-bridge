{"version":3,"sources":["grid/col.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAQ,mB,sBAAA,a;;AACA,Y,+BAAA,M;;AACA,e,oBAAA,S;;AACA,uB,qBAAA,iB;;AACA,sB,2BAAA,gB;;AACA,oB,yBAAA,c;;AACA,U,eAAA,I;;;qBAKK,G,WAHZ,cAAiB,UAAU,aAA3B,S,UACA,kBAAkB,YAAlB,C,UACA,OAAO,gBAAP,EAAyB,cAAzB,EAAyC,IAAzC,EAA+C,OAA/C,C;AAGC,qBAAY,gBAAZ,EAA8B,cAA9B,EAA8C,IAA9C,EAAoD,OAApD,EAA6D;AAAA;;AAC3D,eAAK,gBAAL,GAAwB,gBAAxB;AACA,eAAK,cAAL,GAAsB,cAAtB;AACA,eAAK,IAAL,GAAY,IAAZ;AACA,eAAK,OAAL,GAAe,OAAf;AACD;;sBAED,kB,iCAAqB;AACnB,cAAI,YAAY,KAAK,IAAL,CAAU,cAAV,CAAyB,KAAK,OAA9B,EAA0C,UAAU,aAApD,cAAhB;AACA,eAAK,gBAAL,CAAsB,YAAtB,CAAmC,IAAnC,EAAyC,YAAzC,EAAuD,SAAvD;AACD,S;;sBAGD,iB,8BAAkB,O,EAAS;AAAA;;AACzB,cAAI,UAAU,KAAK,IAAL,CAAU,cAAV,CAAyB,KAAK,OAA9B,EAA0C,UAAU,aAApD,SAAd;AACA,cAAI,WAAW,QAAQ,MAAR,GAAiB,CAAhC,EAAmC;AACjC,oBAAQ,OAAR,GAAkB,EAAlB;;AAEA,oBAAQ,OAAR,CAAgB,eAAO;AACrB,sBAAQ,OAAR,CAAgB,IAAhB,CAAqB,MAAK,cAAL,CAAoB,UAApB,CAA+B,GAA/B,EAAoC,YAApC,CAArB;AACD,aAFD;AAGD;AACF,S","file":"grid/col.js","sourceRoot":"/source/","sourcesContent":["import {customElement} from 'aurelia-templating';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {constants} from '../common/constants';\r\nimport {generateBindables} from '../common/decorators';\r\nimport {TemplateGatherer} from '../common/template-gatherer';\r\nimport {OptionsBuilder} from '../common/options-builder';\r\nimport {Util} from '../common/util';\r\n\r\n@customElement(`${constants.elementPrefix}col`)\r\n@generateBindables('GridColumn')\r\n@inject(TemplateGatherer, OptionsBuilder, Util, Element)\r\nexport class Col {\r\n\r\n  constructor(templateGatherer, optionsBuilder, util, element) {\r\n    this.templateGatherer = templateGatherer;\r\n    this.optionsBuilder = optionsBuilder;\r\n    this.util = util;\r\n    this.element = element;\r\n  }\r\n\r\n  beforeOptionsBuild() {\r\n    let templates = this.util.getChildrenVMs(this.element, `${constants.elementPrefix}template`);\r\n    this.templateGatherer.useTemplates(this, 'GridColumn', templates);\r\n  }\r\n\r\n  // recursively get options of all nested columns that we can pass to Kendo\r\n  afterOptionsBuild(options) {\r\n    let columns = this.util.getChildrenVMs(this.element, `${constants.elementPrefix}col`);\r\n    if (columns && columns.length > 0) {\r\n      options.columns = [];\r\n\r\n      columns.forEach(col => {\r\n        options.columns.push(this.optionsBuilder.getOptions(col, 'GridColumn'));\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}