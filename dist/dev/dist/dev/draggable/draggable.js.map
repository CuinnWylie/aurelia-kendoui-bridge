{"version":3,"sources":["draggable/draggable.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAQ,Y,+BAAA,M;;AACA,qB,sBAAA,e;;AACA,gB,qBAAA,U;;AACA,uB,qBAAA,iB;;AACA,e,oBAAA,S;;;2BAMK,S,WAHZ,gBAAmB,UAAU,eAA7B,e,UACA,kBAAkB,gBAAlB,C,UACA,OAAO,OAAP,EAAgB,UAAhB,C;AAGC,2BAAY,OAAZ,EAAqB,UAArB,EAAiC;AAAA;;AAC/B,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,UAAL,GAAkB,WACG,OADH,CACW,gBADX,EAEG,aAFH,CAEiB,IAFjB,CAAlB;AAGD;;4BAED,I,iBAAK,G,EAAK;AACR,eAAK,OAAL,GAAe,GAAf;AACD,S;;4BAED,Q,uBAAW;AACT,cAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,iBAAK,QAAL;AACD;AACF,S;;4BAED,Q,uBAAW;AAAA;;AACT,eAAK,OAAL,GAAe,KAAK,UAAL,CAAgB,YAAhB,CAA6B;AAC1C,qBAAS,KAAK,OAD4B;AAE1C,uBAAW,KAAK,OAF0B;AAG1C,8BAAkB;AAAA,qBAAW,MAAK,gBAAL,CAAsB,OAAtB,CAAX;AAAA;AAHwB,WAA7B,CAAf;AAKD,S;;4BAED,gB,6BAAiB,O,EAAS;AACxB,cAAI,QAAQ,SAAZ,EAAuB;AACrB,mBAAO,MAAP,CAAc,OAAd,EAAuB,EAAE,WAAW,EAAE,QAAQ,SAAV,CAAb,EAAvB;AACD;AACF,S;;4BAED,Q,uBAAW;AACT,eAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,OAA7B;AACD,S","file":"draggable/draggable.js","sourceRoot":"/source/","sourcesContent":["import {inject} from 'aurelia-dependency-injection';\r\nimport {customAttribute} from 'aurelia-templating';\r\nimport {WidgetBase} from '../common/widget-base';\r\nimport {generateBindables} from '../common/decorators';\r\nimport {constants} from '../common/constants';\r\nimport 'kendo.draganddrop.min';\r\n\r\n@customAttribute(`${constants.attributePrefix}draggable`)\r\n@generateBindables('kendoDraggable')\r\n@inject(Element, WidgetBase)\r\nexport class Draggable {\r\n\r\n  constructor(element, widgetBase) {\r\n    this.element = element;\r\n    this.widgetBase = widgetBase\r\n                        .control('kendoDraggable')\r\n                        .linkViewModel(this);\r\n  }\r\n\r\n  bind(ctx) {\r\n    this.$parent = ctx;\r\n  }\r\n\r\n  attached() {\r\n    if (!this.kNoInit) {\r\n      this.recreate();\r\n    }\r\n  }\r\n\r\n  recreate() {\r\n    this.kWidget = this.widgetBase.createWidget({\r\n      element: this.element,\r\n      parentCtx: this.$parent,\r\n      beforeInitialize: options => this.beforeInitialize(options)\r\n    });\r\n  }\r\n\r\n  beforeInitialize(options) {\r\n    if (options.container) {\r\n      Object.assign(options, { container: $(options.container) });\r\n    }\r\n  }\r\n\r\n  detached() {\r\n    this.widgetBase.destroy(this.kWidget);\r\n  }\r\n}\r\n"]}