{"version":3,"sources":["panelbar/panelbar.js"],"names":[],"mappings":";;;;;;;;;;;;;AA4DA,WAAS,gBAAT,CAA0B,OAA1B,EAAmC;AACjC,WAAO,QAAQ,QAAR,CAAiB,MAAjB,GAA0B,CAA1B,KAAgC,QAAQ,QAAR,CAAiB,CAAjB,EAAoB,QAApB,KAAiC,IAAjC,IAAyC,QAAQ,QAAR,CAAiB,CAAjB,EAAoB,QAApB,KAAiC,IAA1G,CAAP;AACD;;;AA9DO,mB,sBAAA,a;;AACA,Y,+BAAA,M;;AACA,e,oBAAA,S;;AACA,gB,qBAAA,U;;AACA,uB,qBAAA,iB;;;0BAMK,Q,WAHZ,cAAiB,UAAU,aAA3B,e,UACA,kBAAkB,eAAlB,C,UACA,OAAO,OAAP,EAAgB,UAAhB,C;AAGC,0BAAY,OAAZ,EAAqB,UAArB,EAAiC;AAAA;;AAC/B,eAAK,OAAL,GAAe,OAAf;AACA,eAAK,UAAL,GAAkB,WACG,OADH,CACW,eADX,EAEG,aAFH,CAEiB,IAFjB,CAAlB;AAGD;;2BAED,I,iBAAK,G,EAAK;AACR,eAAK,OAAL,GAAe,GAAf;AACD,S;;2BAED,Q,uBAAW;AACT,cAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,iBAAK,QAAL;AACD;AACF,S;;2BAED,Q,uBAAW;AACT,cAAI,UAAU,KAAK,OAAnB;;AAGA,cAAI,CAAC,iBAAiB,OAAjB,CAAL,EAAgC;AAC9B,gBAAI,KAAK,SAAS,aAAT,CAAuB,IAAvB,CAAT;;AAEA,mBAAO,QAAQ,QAAR,CAAiB,MAAjB,GAA0B,CAAjC,EAAoC;AAClC,iBAAG,WAAH,CAAe,QAAQ,QAAR,CAAiB,CAAjB,CAAf;AACD;;AAED,oBAAQ,WAAR,CAAoB,EAApB;AACA,sBAAU,EAAV;AACD,WATD,MASO;AACL,sBAAU,KAAK,OAAL,CAAa,QAAb,CAAsB,CAAtB,CAAV;AACD;;AAED,eAAK,OAAL,GAAe,KAAK,UAAL,CAAgB,YAAhB,CAA6B;AAC1C,qBAAS,OADiC;AAE1C,uBAAW,KAAK,OAF0B;AAG1C,yBAAa,KAAK;AAHwB,WAA7B,CAAf;AAKD,S;;2BAED,M,qBAAS;AACP,eAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,OAA7B;AACD,S","file":"panelbar/panelbar.js","sourceRoot":"/source/","sourcesContent":["import {customElement} from 'aurelia-templating';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {constants} from '../common/constants';\r\nimport {WidgetBase} from '../common/widget-base';\r\nimport {generateBindables} from '../common/decorators';\r\nimport 'kendo.panelbar.min';\r\n\r\n@customElement(`${constants.elementPrefix}panel-bar`)\r\n@generateBindables('kendoPanelBar')\r\n@inject(Element, WidgetBase)\r\nexport class PanelBar {\r\n\r\n  constructor(element, widgetBase) {\r\n    this.element = element;\r\n    this.widgetBase = widgetBase\r\n                        .control('kendoPanelBar')\r\n                        .linkViewModel(this);\r\n  }\r\n\r\n  bind(ctx) {\r\n    this.$parent = ctx;\r\n  }\r\n\r\n  attached() {\r\n    if (!this.kNoInit) {\r\n      this.recreate();\r\n    }\r\n  }\r\n\r\n  recreate() {\r\n    let element = this.element;\r\n\r\n    // Insert a node in between the parent/children if no UL/OL is found\r\n    if (!hasListChildNode(element)) {\r\n      let ul = document.createElement('ul');\r\n\r\n      while (element.children.length > 0) {\r\n        ul.appendChild(element.children[0]);\r\n      }\r\n\r\n      element.appendChild(ul);\r\n      element = ul;\r\n    } else {\r\n      element = this.element.children[0];\r\n    }\r\n\r\n    this.kWidget = this.widgetBase.createWidget({\r\n      element: element,\r\n      parentCtx: this.$parent,\r\n      rootElement: this.element\r\n    });\r\n  }\r\n\r\n  unbind() {\r\n    this.widgetBase.destroy(this.kWidget);\r\n  }\r\n}\r\n\r\n\r\n// if the first child is not a UL/OL then create one to use as the target, otherwise the panelbar can look a bit mangled\r\nfunction hasListChildNode(element) {\r\n  return element.children.length > 0 && (element.children[0].nodeName === 'UL' || element.children[0].nodeName === 'OL');\r\n}\r\n"]}